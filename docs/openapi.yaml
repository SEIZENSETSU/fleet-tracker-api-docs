swagger: '2.0'
info:
  version: '1.0.0'
  title: 'Fleet Tracker API'
  description: 'このAPIはFleet TrackerのためのAPIです。'
tags:
  - name: warehouse
    description: 倉庫情報API
  - name: delay
    description: 遅延情報API
  - name: comment
    description: コメントAPI
  - name: user
    description: ユーザーAPI
  - name: hello
    description: Hello API
host: 'localhost:8003'
schemes:
  - http
paths:
  /warehouses:
    get:
      tags:
        - warehouse
      summary: 倉庫一覧情報取得API
      description: '倉庫の一覧情報を取得します'
      produces:
        - application/json
      parameters:
        - name: warehouse_area_id
          in: query
          description: 倉庫エリアID
          required: false
          type: integer
      responses:
        '200':
          description: 取得成功
          schema:
            type: array
            items:
              $ref: '#/definitions/Warehouse'
        400:
          description: パラメータエラー
          schema:
            type: object
            properties:
              error:
                type: string
                example: 該当する倉庫エリアが存在しません
  /areas/warehouses:
    get:
      tags:
        - warehouse
      summary: ローカルエリアごとの倉庫情報一括取得API
      description: 'ローカルエリアおよび倉庫エリアでグループ化された倉庫の一覧情報を取得します'
      produces:
        - application/json
      parameters: [ ]
      responses:
        '200':
          description: 取得成功
          schema:
            type: array
            items:
              $ref: '#/definitions/LocalAreaResponse'
        400:
          description: パラメータエラー
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'エラー: 無効なリクエストです'
  /warehouse:
    get:
      tags:
        - warehouse
      summary: 倉庫情報取得API
      description: '倉庫エリアIDまたは倉庫IDから、倉庫情報を取得するAPIです'
      produces:
        - application/json
      parameters:
        - name: warehouse_id
          in: query
          description: 倉庫ID
          required: true
          type: integer
      responses:
        '200':
          description: 取得成功
          schema:
            type: object
            $ref: '#/definitions/Warehouse'
        400:
          description: パラメータエラー
          schema:
            type: object
            properties:
              error:
                type: string
                example: 該当する倉庫が存在しません
  /comments:
    get:
      tags:
        - comment
      summary: コメント取得API
      description: "倉庫IDからコメントを一括取得するAPIです"
      produces:
        - application/json
      parameters:
        - name: warehouse_id
          in: query
          description: 倉庫ID
          required: true
          type: integer
      responses:
        200:
          description: 取得成功
          schema:
            type: array
            items:
              $ref: "#/definitions/Comment"
        400:
          description: パラメータエラー
          schema:
            type: object
            properties:
              error:
                type: string
                example: 該当する倉庫が存在しません
  /comment:
    post:
      tags:
        - comment
      summary: コメント登録API
      description: "倉庫IDにコメントを登録するAPIです"
      produces:
        - application/json
      parameters:
        - in: body
          name: comment
          description: コメント情報
          required: true
          schema:
            $ref: "#/definitions/CommentRequest"
      responses:
        201:
          description: 登録成功
          schema:
            type: object
            $ref: "#/definitions/CommentRequest"
        400:
          description: パラメータエラー
          schema:
            type: object
            properties:
              error:
                type: string
                example: パラメータエラー
    delete:
      tags:
        - comment
      summary: コメント削除API
      description: "倉庫IDとコメントIDからコメントを削除するAPIです"
      produces:
        - application/json
      parameters:
        - name: comment_id
          in: query
          description: コメントID
          required: true
          type: integer
      responses:
        204:
          description: 削除成功
        400:
          description: パラメータエラー
          schema:
            type: object
            properties:
              error:
                type: string
                example: 該当する倉庫が存在しません
  /user:
    get:
      tags:
        - user
      summary: ユーザー情報取得API
      description: "ユーザーIDからユーザー情報を取得するAPIです"
      produces:
        - application/json
      parameters:
        - name: uid
          in: query
          description: ユーザーID
          required: true
          type: string
      responses:
        200:
          description: 取得成功
          schema:
            type: object
            $ref: "#/definitions/UserResponse"
        400:
          description: パラメータエラー
          schema:
            type: object
            properties:
              error:
                type: string
                example: 該当するユーザーが存在しません
    post:
      tags:
        - user
      summary: ユーザー登録API
      description: "ユーザーを登録するAPIです"
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: ユーザー情報
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: 登録成功
          schema:
            type: object
            $ref: "#/definitions/User"
        400:
          description: パラメータエラー
          schema:
            type: object
            properties:
              error:
                type: string
                example: パラメータエラー
    put:
      tags:
        - user
      summary: ユーザー更新API
      description: "ユーザーを更新するAPIです"
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: ユーザー情報
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: 更新成功
          schema:
            type: object
            $ref: "#/definitions/User"
        400:
          description: パラメータエラー
          schema:
            type: object
            properties:
              error:
                type: string
                example: パラメータエラー
    delete:
      tags:
        - user
      summary: ユーザー削除API
      description: "ユーザーを削除するAPIです"
      produces:
        - application/json
      parameters:
        - name: uid
          in: query
          description: ユーザーID
          required: true
          type: string
      responses:
        204:
          description: 削除成功
        400:
          description: パラメータエラー
          schema:
            type: object
            properties:
              error:
                type: string
                example: 該当するユーザーが存在しません
  /delay:
    get:
      tags:
        - delay
      summary: 遅延情報取得API
      description: "倉庫IDから遅延情報を取得するAPIです"
      produces:
        - application/json
      parameters:
        - name: warehouse_id
          in: query
          description: 倉庫ID
          required: true
          type: integer
      responses:
        200:
          description: 取得成功
          schema:
            type: array
            items:
              $ref: "#/definitions/DelayInformation"
        400:
          description: パラメータエラー
          schema:
            type: object
            properties:
              error:
                type: string
                example: 該当する倉庫が存在しません
    post:
      tags:
        - delay
      summary: 遅延情報登録API
      description: "倉庫IDに遅延情報を登録するAPIです。 delay_stateにはnormal, pause, halfHour, anHour, impossibleのいずれかを指定してください。"
      produces:
        - application/json
      parameters:
        - in: body
          name: delay
          description: 遅延情報
          required: true
          schema:
            $ref: "#/definitions/DelayInformationRequest"
      responses:
        201:
          description: 登録成功
          schema:
            type: object
            $ref: "#/definitions/DelayInformationRequest"
        400:
          description: パラメータエラー
          schema:
            type: object
            properties:
              error:
                type: string
                example: パラメータエラー
  /hello:
    get:
      tags:
        - hello
      summary: Hello API
      description: 'Hello API'
      produces:
        - application/json
      responses:
        '200':
          description: 取得成功
          schema:
            type: string
            example: 'Hello, World!'
definitions:
  LocalAreaResponse:
    type: object
    properties:
      local_area_id:
        type: integer
        example: 1
      local_area_name:
        type: string
        example: 関東
      warehouse_areas:
        type: array
        items:
          type: object
          properties:
            warehouse_area_id:
              type: integer
              example: 1
            local_area_id:
              type: integer
              example: 1
            warehouse_area_name:
              type: string
              example: 東京
            warehouse_area_latitude:
              type: number
              format: double
              example: 35.689
            warehouse_area_longitude:
              type: number
              format: double
              example: 139.692
            warehouses:
              type: array
              items:
                $ref: '#/definitions/Warehouse'
  Warehouse:
    type: object
    properties:
      warehouse_id:
        type: integer
        example: 1
      warehouse_area_id:
        type: integer
        example: 11
      warehouse_name:
        type: string
        example: ハルフーズ東京工場
      warehouse_latitude:
        type: number
        format: double
        example: 35.689
      warehouse_longitude:
        type: number
        format: double
        example: 139.692
  Comment:
    type: object
    properties:
      comment_id:
        type: integer
        example: 1
      uid:
        type: string
        example: user1
      warehouse_id:
        type: integer
        example: 1
      contents:
        type: string
        example: テストコメント
      created_at:
        type: string
        example: 2022-07-02 00:00:00
  CommentRequest:
    type: object
    properties:
      uid:
        type: string
        example: user1
      warehouse_id:
        type: integer
        example: 1
      contents:
        type: string
        example: テストコメント
  User:
    type: object
    properties:
      uid:
        type: string
        example: 'user1'
      user_name:
        type: string
        example: 'ユーザー1'
      fcm_token_id:
        type: string
        example: 'fcm_token_id'
  UserResponse:
    type: object
    properties:
      uid:
        type: string
        example: 'user1'
      user_name:
        type: string
        example: 'ユーザー1'
  DelayInformation:
    type: "object"
    properties:
      delay_information_id:
        type: "integer"
        example: 1
      warehouse_id:
        type: "integer"
        example: 1
      delay_time_detail:
        type: array
        items:
          type: object
          properties:
            delay_state:
              type: string
              example: normal
              description: normal, pause, halfHour, anHour, impossibleのいずれか
            answer_count:
              type: "integer"
              example: 3
      created_at:
        type: "string"
        example: "2022-07-02 00:00:00"
        format: "date-time"
      updated_at:
        type: "string"
        example: "2022-07-02 00:00:00"
        format: "date-time"
  DelayInformationRequest:
    type: "object"
    required:
      - "warehouse_id"
      - "uid"
      - "delay_state"
    properties:
      warehouse_id:
        type: "integer"
        example: 1
      delay_state:
        type: string
        example: normal
        description: normal, pause, halfHour, anHour, impossibleのいずれか

externalDocs:
  description: 'Find out more about Swagger'
  url: 'http://swagger.io'
